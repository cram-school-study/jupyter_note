1.1 지네릭스(Generics)
- 컴파일시 타입을 체크해 주는 기능(compile - time type check) - jdk1.5
- 객체의 타입 안정성을 높이고 형변환의 번거로움을 줄여줌
  (하나의 컬렉션에는 대부분 한 종류의 객체만 저장)
  
* 장점
- 타입 안정성을 제공한다.
- 타입체크와 형변환을 생략할 수 있으므로 코드가 간결해진다.
 ex) 타입변수 E

1.2 지네릭 클래스의 선언
- 클래스를 작성할때, Objct 타입 대신 T와 같은 타입변수를 사용
- 참조변수, 생성자에 T대신 실제 타입을 지정하면 형변환 생략가능

1.3 지네릭스의 용어
- Box<T> - 지네릭 클래스. 'T의 Box' or 'T Box'라고 읽는다.
- T - 타입 변수 또는 타입 매개변수.(T는 타입 문자)
- Box - 원시타입(raw type)

1.4 지네릭스의 제약사항
- static 멤버에는 타입변수 T를 사용할 수 없다.
- 지네릭 타입의 배열 T[]를 생성하는 것은 허용되지 않는다. (선언은 가능, 생성은 불가능)
 -> instanceof 연산자와 new연산자는 컴파일 시점에 타입 T가 뭔지 정확히 알아야한다.???????
 -> 지네릭 배열 생성해야 한다면 newinstance()와 같이 동적으로 객체 생성하는 메서드로 배열 생성하거나 Object 배열 생성해 복사한 다음 T[]로 형변환
 
1.5 지네릭 클래스의 객체 생성과 사용
- 지네릭 클래스 Box<T>의 선언
- Box<T>의 객체 생성. 참조변수와 생성자에 대입된 타입이 일치해야 함.
- 두 지네릭 클래스가 상속관계이고, 대입된 타입이 일치하는 것은 OK
- 대입된 타입과 다른 타입의 객체는 추가할 수 없다.

1.6 제한된 지네릭 클래스
- 지네릭 타입에 'extends'를 사용하면, 특정 타입의 자손들만 대입할 수 있게 제한할 수 있다.
- add()의 매개변수의 타입 T도 Frult와 그 자손 타입이 될 수 있다.
- 인터페이스의 경우에도 'implements' 가 아닌, 'extends'를 사용
 ex) class FrultBox<T extends Frult & Eatable> {...}
 
1.7 와일드카드 '?'
- 지네릭 타입에 와일드 카드를 쓰면, 여러 타입을 대입가능
  단, 와일드 카드에는 <? extends T & E>와 같이 & 를 사용 불가
- <? extends T> - 와일드 카드의 상한 제한, T와 그 자손들만 가능
  <? super T> - 와일드 카드의 하한 제한. T와 그 조상들만 가능
  <?> - 제한 없음. 모든 타입이 가능. <? extends Object>와 동일

- makeJuice()의 매개변수로 FuritBox<Apple>, FruitrBox<Grape> 가능

1.8 지네릭 메서드
- 반환타입 앞에 지네릭 타입이 선언된 메서드
- 클래스의 타입 매개변수<T>와 메서드의 타입 매개변수<T>는 별개
- 지네릭 메서드를 호출할 때, 타입 변수에 타입을 대입해야 한다.
 (대부분의 경우, 추정이 가능하므로 생략할 수 있음.)
 
1.9 지네릭 타입의 형변환
- 지네릭 타입과 원시 타입간의 형변환은 불가능.
- 와일드 카드가 사용된 지네릭 타입으로는 형변환 가능
- <? extends Object>를 줄여서 <?>로 쓸 수 있다.

1.10 지네릭 타입의 제거
- 컴파일러는 지네릭 타입을 제거하고, 필요한 곳에 형변환을 넣는다.
 1. 지네릭 타입의 경계(bound)를 제거
 2. 지네릭 타입 제거 후에 타입이 불일치하면, 형변환을 추가
 3. 와일드 카드가 포함된 경우, 적절한 타입으로 형변환 추가
 
 
2. 열거형(enums)
2.1 열거형이란?
- 관련된 상수들을 같이 묶어 놓은 것. Java는 타입에 안전한 열거형을 제공

2.2 열거형의 정의와 사용
- 열거형을 정의하는 방법 - enum 열거형이름 {상수형1, 상수형2, ...}
- 열거형 타입의 변수를 선언하고 사용하는 방법
- 열거형 상수의 비교에 == 와 compareTo() 사용가능

2.3 모든 열거형의 조상 - java.lang.Enum
- 모든 열거형은 Enum의 자손이며, 메서드를 상속받는다.
* ordinal() - 열거형 상수가 정의된 순서를 반환한다.(0부터 시작)
- 컴파일러가 자동적으로 추가해 주는 메서드도 있다.
 -> values(), valueOf(String name)

2.4 열거형에 멤버 추가하기
- 불연속적인 열거형 상수의 경우, 원하는 값을 괄호()안에 적는다.
- 괄호()를 사용하려면, 인스턴스 변수와 생성자를 새로 추가해 줘야 한다.
- 열거형의 생성자는 묵시적으로 private이므로, 외부에서 객체생성 불가

2.5 열거형의 이해
- 열거형 Direction이 아래와 같이 선언되어 있을 때,

- 열거형 Direction은 아래와 같은 클래스로 선언된 것과 유사하다.

 
3.1 에노테이션(annotation)
- 주석처럼 프로그래밍 언어에 영향을 미치지 않으며, 유용한 정보를 제공
3.2 표준 애너테이션
- Java에서 제공하는 애너테이션

@Override
- 오버라이딩을 올바르게 했는지 컴파일러가 체크하게 한다.
- 오버라이딩할 때 메서드이름을 잘못적는 실수를 하는 경우가 많다.

@Deprecated
- 앞으로 사용하지 않을 것을 권장하는 필드나 메서드에 붙인다.
- @Deprecated의 사용 예, Date 클래스의 getDate()
- @Deprecated가 붙은 대상이 사용된 코드를 컴파일하면 나타나는 메시지
 
@FunctionalInterface
- 함수형 인터페이스에 붙이면, 컴파일러가 올바르게 작성했는지 체크
 함수형 인터페이스에는 하나의 추상메서드만 가져야 한다는 제약이 있음.
 
@SuppressWarnings
- 컴파일러의 경고메시지가 나타나지 않게 억제한다.
- 괄호()안에 억제하고자하는 경고의 종류를 문자열로 지정
- 둘 이상의 경고를 동시에 억제하려면 다음과 같이 한다.
- '-Xlint' 옵션으로 컴파일하면, 경고메시지를 확인할 수 있다.
  괄호[]안이 경고의 종류. 아래의 경우 rawtypes

@Target
- 메타 애너테이션은 '애너테이션을 위한 애너테이션'
- 애너테이션을 정의할 때, 적용대상이나 유지기간의 지정에 사용
- @Target은 애너테이션을 적용할 수 있는 대상의 지정에 사용

@Retention
- 애너테이션이 유지되는 기간을 지정하는데 사용
- 컴파일러에 의해 사용되는 애너테이션의 유지 정책은 source이다.
- 실행시에 사용 가능한 애너테이션의 정책은 rentime이다
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 