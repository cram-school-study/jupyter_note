1. 쓰레드, 프로세스, 멀티 쓰레드

* multi-processiong vs single-processing
- 여러개 프로세스를 돌리는 것 vs 하나의 프로세스를 돌리는 것
* multi-threading vs single-threading
- 1개의 프로세스에 여러개 멀티를 돌리는 것 - 1개의 프로세스에 1개의 쓰레드를 돌리는 것
* deadlock(교착상태)
* Context-switching(문맥 교환) - 작동하는것들끼리 현재 작동하는것을 바꾸면서 지연되는 시간
* Scheduler
* synche - 동기화


1.1 프로세스와 쓰레드
- 프로그램 - 실행 가능한 파일
- 프로세스 - 실행 중인 프로그램(메모리), 자원과 쓰레드로 구성
- 쓰레드 - 프로세스 내에서 실제 작업을 수행.
         - 모든 프로세스는 최소한 하나의 쓰레드를 가지고 있다.
         - 프로세스 : 쓰레드 = 공장 : 일꾼
- 싱글 쓰레드 프로세스 - 자원 + 쓰레드
- 멀티 쓰레드 프로세스 - 자원 + 쓰레드 + 쓰레드 +.....

1.2 멀티 프로세스 vs 멀티쓰레드
- 멀티 태스킹(멀티 프로세싱) - 동시에 여러 프로세스를 실행시키는 것
- 멀티 쓰레딩 - 하나의 프로세스 내에 동시에 여러 쓰레드를 실행시키는 것
 -> 프로세스를 생성하는 것보다 쓰레드를 생성하는 비용이 적다.
 -> 같은 프로세스 내의 쓰레드들은 서로 자원을 공유한다.
 
1.3 멀티쓰레드의 장단점
- 대부분의 프로그램이 멀티쓰레드로 작성되어 있다.
  그러나, 멀티쓰레드 프로그래밍이 장점만 있는것은 아니다.

- 장점 - 시스템 자원을 보다 효율적으로 사용할 수 있다.
       - 사용자에 대한 응답성이 향상된다.
       - 작업이 분리되어 코드가 간결해진다.
       -> 여러모로 좋다.
- 단점 - 동기화에 주의해야한다.
       - 교착상태가 발생하지 않도록 주의해야 한다.
       - 각 쓰레드가 효율적으로 고르게 실행될 수 있게 해야 한다.
       -> 프로그래밍할 때 고려야해 할 사항들이 많다.

1.4 쓰레드의 구현과 실행
- Thread 클래스를 상속
- Runnable 인터페이스르구현

1.5 start()와 run()


2.1 싱글레드 vs 멀티쓰레드
- 싱글 쓰레드
- 멀티 쓰레드 - 싱글코어 - 순차 실행
              - 싱글코어 - 병행(concurrent)
              - 멀티코어 - 병행(concurrnet)
              - 멀티코어 - 병렬(parallel) 
- blocking - 싱글 쓰레드 - 사용자 입력을 기다리는 구간에서는 대기
           - 멀티 쓰레드 - 사용자 입력을 기다리는 도중에도 백그라운드에서 돌아감

2.2 쓰레드 우선순위
- 작업의 중요도에 따라 쓰레드의 우선순위를 다르게 하여 특정 쓰레드가 더 많은 작업시간을 갖게 할 수있다.
- setPriority(int) - 우선순위 지정한 값으로 변경
- getPriority() - 우선순위 값 반환
- 우선순위 1 ~ 10 설정, 10이 최대 우선순위, 1이 최소 우선순위

2.3 쓰레드 그룹
- 서로 관련된 쓰레드를 그룹으로 묶어서 다루기 위한 것(보안상의 이유)
- 모든 쓰레드는 반드시 하나의 쓰레드 그룹에 포함되어 있어야 한다.
- 쓰레드 그룹을 지정하지 않고 생성한 쓰레드는 'main쓰레드 그룹'에 속한다.
- 자신을 생성한 쓰레드(부모 쓰레드)의 그룹과 우선순위를 상속받는다.

2.4 데몬 쓰레드
- 일반 쓰레드의 작업을 돕는 보조적인 역할을 수행.
- 일반 쓰레드가 모두 종료되면 자동적으로 종료된다.
- 가비지 컬렉터, 자동저장, 화면자동갱신 등에 사용된다.
- 무한루프와 조건문을 이용해서 실행 후 대기하다가 특정조건이 만족되면 작업을 수행하고 다시 대기하도록 작성한다.
 -> isDaemon() - 쓰레드가 데몬 쓰레드인지 확인한다. 데몬 쓰레드이면 true를 반환
 -> set Daemon(boolean) - 쓰레드를 데몬 쓰레드로 또는 사용자 쓰레드로 변경
                        - 매개변수 on을 true로 지정하면 데몬 쓰레드가 된다.
                        - setDaemon은 반드시 start()를 호출하기 전에 실행되어야 한다.,
                         -> 그렇지 않으면 IllegalThreadStateException이 발생한다.

* 인터럽트 - CPU가 프로그램을 실행하고 있을 때, 입출력 하드웨어 등의 장치나 예외상황이 발생하여 처리가 필요할 경우에 마이크로프로세서에게 알려 철리할 수 있도록 하는것을 말한다.
           - 인터럽트는 크게 하드웨어 인터럽트, 소프트웨어 인터럽트로 나뉜다.
           

3.1 쓰레드의 실행제어
- 쓰레드의 실행을 제어(스케줄링)할 수 있는 메서드가 제공된다.
  이들을 활용해서 보다 효율적인 프로그램의 작성할 수 있다.
- sleep, join, interrupt, stop, suspend, resume, yield

* resume(), stop(), suspend()는 쓰레드를 교착상태로 만들기 쉽기 때문에 deprecated되었다.

3.2 쓰레드의 상태
- new - 쓰레드가 생성되고 아직 start()가 호출 안된 상태
- runnalbe - 실행 중 또는 실행 가능한 상태 - 큐
- blocked - 동기화블럭에 의해서 일시정지된 상태
- wating, timed_wating - 종료는 아니고 실행가능하지않은 일시정지 상태
- terminated - 작업이 종료된 상태

3.3 쓰레드의 실행제어 메서드
- sleep()
 - 현재 쓰레드를 지정된 시간동안 멈추게 한다
  -> sleep(long millis)
 - 예외처리를 해야 한다.(InterruptedException이 발생하면 깨어남)
 - 특정 쓰레드를 지정해서 멈추게 하는 것은 불가능하다.

- interrupt()
 - 대기상태(waiting)인 쓰레드를 실행대기 상태(runnable)로 만든다.
 - void interrupt - 쓰레드의 interrupted상태를 fasle에서 true로 변경
 - boolean isInterrupted() - 쓰레드의 intrrupted상태를 반환
 - static boolean interrupted() - 현재 쓰레드의 interrupted상태를 알려주고, false로 초기화
* 이유는 모르겠지만 Thread가 sleep인 경우에는 interrupt()상태에서는 isInterrupted()가 안먹힘
  다만 try catch구문으로는 먹힌다 알아볼것!!
 
- suspend(), resume(), stop()
 - 쓰레드의 실행을 일시정지, 재개, 완전정지 시킨다. 교착상태에 빠지기 쉽다.
 - deprecated되었으므로, 직접 구현해야 한다.

- yield()
 - 남은 시간을 다음 쓰레드에게 양보하고, 자신(현재 쓰레드)은 실행대기한다.
 - yield()와 interrupt()를 적절히 사용하면, 응답성과 효율을 높일 수 있다.

- join()
 - 지정된 시간동안 특정 쓰레드가 작업하는 것을 기다린다.
 
- join() & interrupt()
 - 
 
 
 
4. 쓰레드의 동기화
- synchronized
 - 한 번에 하나의 쓰레드만 객체에 접근할 수 있도록 객체에 락을 걸어서 데이터의 일관성을 유지하는 
것.
 - 1. 특정한 객체에 lock을 걸고자 할때 synchronized(객체의 참조변수) {}
 - 2. 메서드에 lock을 걸고자 할때 - public synchronized void calcSum() {}

4.2 wait(), notify(), notifyAll()를 이용한 동기화
 - 동기화의 효율을 높이기 위해 wait(), notify()를 사용
 - Object클래스에 정의되어 있으며, 동기화 블록 내에서만 사용할 수 있다.
  - wait() - 객체의 lock을 풀고 쓰레드를 해당 객체의 waiting pool에 넣는다
  - notify() - waiting pool에서 대기중인 쓰레드 중의 하나를 깨운다.
  - notifyAll() - waiting pool에서 대기중인 모든 쓰레드를 깨운다.
 


















