9.1
프로그램 오류
- 컴파일 에러 - 컴파일 할때 발생하는 에러
              - 문법 에러
- 런타임 에러 - 실행할때 발생하는 에러
              - type, index(out of range), divide by zero, out of memory, overflow,infinite looping
- 논리적 에러 - 의도와 다르게 동작(실행시)


에러와 예외
- 에러(error) - 수습될수 없는 심각한 오류
- 예외(exception) - 수습될수 있는 미약한 오류
- 에러는 어쩔수 없지만, 예외는 처리해야한다.

9.2
예외처리
- 정의 - 프로그램 실행 시 발생할 수 있는 예외의 발생에 대비한 코드를 작성하는 것
- 목적 - 프로그램의 비정상 종료를 막고, 정상적인 실행상태를 유지하는 것
* 에러와 예외는 모두 실행(runtime)시 발생하는 오류이다.

9.3
try-catch
- 예외를 처리하려면 try-catch문을 사용해야한다.
- if문과 달리 try블럭이나 catch블럭 내에 포함된 문장이 하나라고 해서 괄호{}를 생략할 수 없다.

9.4
흐름
try블럭 내에서 예외가 발생한 경우
- 발생한 예외한 일치한 catch블럭이 있는지 확인
- 일치하는 catch블럭을 찾게되면, 그 catch를 실행하고, 나와서 계속 실행한다. 만약 못찾으면 예외는 처리되지 못한다.

try블럭 밖에서 예외가 발생한 경우
- catch블럭을 거치지않고 전체 try문을 빠져나가서 수행을 계속한다.

9.5
예외 발생시키기
- 먼저, 연산자 new를 이용해서 발생시키려는 예외 클래스의 객체를 만든 다음
- 키워드 throw를 이용해서 예외를 발생시킨다.

9.6
예외 클래스의 계층구조
RuntimeExcpetion 클래스들 - 프로그래머의 실수로 발생하는 예외 - 예외처리 선택
Exception 클래스들 - 사용자의 실수와 같은 외적인 요인에 의해 발생하는 예외 - 예외처리 필수

Exception
    IOException
    ClassNotFoundException
    
    RuntimeException
        ArithmeticException
        ClassCastException
        NullPointerException
        IndexOutOfBoundsExcpetion
        
9.7
예외의 발생과 catch블럭
- try블럭에서 예외가 발생하면, 발생한 예외를 처리할 catch블럭을 찾는다.
- 첫번째 catch블럭부터 순서대로 찾아가며, 일치하는 catch블럭이 없으면 예외는 처리되지않는다.
- 예외의 최고 조상인 Exception을 처리하는 catch블럭은 모든 종류의 예외를 처리할 수 있다.
  (반드시 마지막 catch블럭이어야 한다.)
- 발생한 예외 객체를 catch블럭의 참조변수로 접근할 수 있다.
- printStackTrac() - 예외발생 당시의 호출스택에 있었던 메서드와 정보와 예외 메시지를 화면에 출력한다.
-> 그냥 print로 뿌리면 에러 메시지만 뿌리고 몇번째 줄이 에러인지는 표시 안해줌. 이건 표시해준다.

- getMessage() - 발생한 예외클래스의 인스턴스에 저장된 메시지를 얻을 수 있다.

9.8
finally 블럭
- 예외의 발생여부와 관계없이 실행되어야 하는 코드를 넣는다.
- 선택적으로 사용할 수 있으며, try-catch-finally의 순으로 구성된다.
- 예외 발생 - try -> catch -> finally, 예외 미발생 - try -> finally
- try 또는 catch블럭에서 return문을 만나도 finally블럭은 수행된다.


9.9
메서드 예외 선언하기
- 예외를 처리하는 또 다른 방법
- 사실은 예외를 처리하는 것이 아니라, 호출한 메서드로 전달해주는 것
- 호출한 메서드에서 예외처리를 해야만 할 때 사용

* 예외를 발생시키는 키워드 thow와 예외를 메서드에 선언할 때 쓰이는 throws를 잘 구별하자.



































